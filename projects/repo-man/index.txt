---
layout: project
title: Repo-man Home
---

*Repo-man* is a project-management system that is designed to be entirely contained within the source-code repository.  

Other setups require using the repository for making code changes but stepping into an external system for bug management, use cases, documentation, etc., etc. This commonly means that developers *don't* write good documentation, don't refer to bugs often enough, and they completely ignore use cases.  The Agile Process [says it best][ap], "If you don't use your process it can't help you; if your process doesn't help, you won't use it."

 [ap]: http://www.agile-process.org/process.html

Repo-man steps in and provides "one true place" for managing *everything* about a project.  The idea is that no other tools or systems are needed:   you don't need a web browser, you don't need Microsoft Project, you don't need any third-party ticketing system:  the repository has everything in it organized logically and versioned right along with the source code that it describes.  Since there is some benefit in being able to browse bugs and use a cross-referenced wiki, there are scripts designed to provide HTML-based views on the data.

Here are some key aspects:

 -  The conventions are designed around XP, Scrum, Agile, etc. and favor test-
    and use-case-driven development.

 -  All documentation is written in [Markdown][] for easy editing and
    conversion to HTML when appropriate. (Support for groff output with
    the [pandoc][] tool is coming.)

 -  There is no specific requirement on the kind of SCM used:  you can use
    Subversion, Git, Perforce, or even dreaded CVS.

 -  There is no requirement on the language or environment you are coding in.
    The provided scripts are written in bash, but they are easy to adapt if
    necessary.

[Markdown]: http://TODO
[pandoc]: http://TODO


## The Layout ##

Here's what the default repo-man repository looks like:

    .
    |-- MyProject
    |   |-- Code
    |   |   `-- src
    |   |       |-- main
    |   |       |   |-- java
    |   |       |   `-- resources
    |   |       |-- site
    |   |       `-- test
    |   |           |-- java
    |   |           |-- resources
    |   |           `-- shell
    |   |               `-- UseCase
    |   |-- Readme.txt
    |   |-- Sprints
    |   |   |-- Current
    |   |   |   |-- Bugs
    |   |   |   |-- Readme.txt
    |   |   |   `-- Use Cases
    |   |   |-- Future
    |   |   |   |-- Bugs
    |   |   |   |-- Readme.txt
    |   |   |   `-- Use Cases
    |   |   |-- Next
    |   |   |   |-- Bugs
    |   |   |   |-- Readme.txt
    |   |   |   `-- Use Cases
    |   |   |-- Past
    |   |   `-- Readme.txt
    |   |-- Target
    |   |   `-- Readme.txt
    |   |-- Vendor
    |   `-- Wiki
    |       |-- Code Conventions.txt
    |       |-- Codeline Policies.txt
    |       |-- Eclipse Setup.txt
    |       |-- Media
    |       |-- Release Process.txt
    |       |-- Releases.txt
    |       `-- User Model.txt
    `-- Tools
        |-- bin
        |   |-- env.sh
        |   |-- findroot.sh
        |   |-- nextbugnumber.sh
        |   |-- tasks.sh
        |   `-- wiki2html.sh
        |-- lib
        |   |-- Maven
        |   |   `-- repo-man-plugin
        |   `-- Perl
        |       `-- FormParser
        |-- man
        |   `-- man1
        `-- test
            |-- Readme.txt
            |-- run_tests.sh
            `-- tests
                |-- findroot
                |   `-- test.sh
                `-- nextbugnumber
                    `-- test.sh

    
(The `[...]`s indicate that some children of the directory are omitted for
brevity.)

## `Projects` Versus `Users` Versus `Tools` ##

 -  The `Projects` directory houses all of the active projects.  We don't have
    a separate repository for each project because we want it to be easy for
    developers to work on multiple projects at multiple times and for code
    to be shared among projects easily by branching.

 -  The `Users` directory has a subdirectory for each developer working on 
    projects (should be the user's login name for the repo so it matches
    with commit messages).  Users can put personal projects, branches of code,
    and whatever else there.

    This is also where users can put weekly status reports if the organization
    requires them as well as contact information so other developers know how
    to get ahold of them.

 -  The `Tools` directory is where the organization puts tools that pertain to
    managing processes, builds, etc. for *all* projects (not the utilities for
    managing any one project in particular). Inside it you'll find the
    following directories:

     +  `bin` which is for command-line utilities useful for working on
        projects. E.g., `wiki2html.sh` builds an HTML version of the project's
        `Wiki` directory and puts it inside the `Target` directory.

        One important utility is `findroot.sh` which looks up the directory
        tree for the project's root starting at the current working directory.
        This allows for you to be inside of any project and to run utilities
        on it easily without having to set variables or manage flags or
        whatever. (Note that `findroot.sh` finds the root by looking up the
        directory tree for a file called `.repo-man` as discussed in the below
        section.)

## The `.repo-man` File ##

The `.repo-man` file is empty and just serves to indicate the project's root for various tools. We need this file because there are very few assumptions we can make about the structure of the project root: it can be checked out in a wide variety of ways by the end developer.

Tools may later decide to write to this file to store some state, but right now it's just empty.

## Recommended Checkout ##

### Perforce ###

If you are using Perforce, the given layout should be checked out like this:

    //depot/Projects/MyProject/Sprints/... //client/MyProject/Sprints/...
    //depot/Projects/MyProject/Wiki/...    //client/MyProject/Wiki/...
    //depot/Projects/MyProject/Vendor/...  //client/MyProject/Vendor/...
    //depot/Projects/MyProject/Code/Trunk/... //client/MyProject/Code/...
    //depot/Projects/MyProject/.repo-man   //client/MyProject/.repo-man
    
    //depot/Tools/...   //client/Tools/...

Branches can be made in personal space (`//depot/Users/$User`) or managed with Git/mercurial/whatever on personal machines.

### SVN ###

Checking out with SVN looks like this:

    mkdir -p workspace/MyProject/Vendor; cd workspace
    svn co http://svn/Projects/MyProject/Sprints    MyProject/Sprints
    svn co http://svn/Projects/MyProject/Wiki       MyProject/Wiki
    svn co http://svn/Projects/MyProject/Code/Trunk MyProject/Code
    touch MyProject/.repo-man


## Sprints ##

Our "sprint" might be called a "milestone" or an "iteration" in other terms.  Typically a sprint will have the following things associated with it:

 +  use cases to focus on
 +  bugs to fix

The "current heartbeat" of the project can be seen by looking at the current sprint in the repository (Sprints/Current).

## Code ##

All of the project's actual source code lives inside the project's *Code* directory.

The example repository layout was designed for use with Peroforce but can very easily be modified to work with Subversion, Git, or whatever else. This example repo was also designed to be used with Apache Maven, but the only part that's apparent is inside the `Code` directory:  everything else described here works for any sort of project with any sort of build system (including `make` or what-have-you).


## The Wiki ##

The wiki should be in plain text, Markdown format.  The Wiki should not contain things like model descriptions or class descriptions:  those belong in the JavaDocs.

"The creation of a document is an implicit agreement to keep it up to date or destroy it." <http://www.agile-process.org/proverbs.html>

"Ideas move faster than documents." <http://www.agile-process.org/proverbs.html>


## Bug and Task Tracking ##

Here's what a bug creation might look like (assuming we have a shell function `nextbugnumber` that gets us the next bug number):

    $ cat > Sprints/Future/Bugs/`nextbugnumber`.txt <<EOINPUT
    Description
    ----------------
    Users with birthday before 12/1/09 don't show up in list view

    Estimated Time
    ----------------
    3 days

    Developers
    ----------------
    Ryan

    Repro Steps
    ----------------

     1. Create a user in the UI
     2. Change birthday to 11/30/09
     3. Switch to list view

    Test Information:
    ----------------
    There's a test for this in the src/test directory.
    EOINPUT

## Scripts ##

Each project may have its own set of scripts of course (recommended that they be )

## Setup ##

TODO: talk about `$REPOMANTOOLSDIR`.

